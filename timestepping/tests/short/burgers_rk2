#!/usr/bin/env python3

# Copyright (C) 2011-2012 by Imperial College London
# Copyright (C) 2013 University of Oxford
# Copyright (C) 2014, 2017 University of Edinburgh
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, version 3 of the License
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Based on burgers_newton.py test from dolfin-adjoint
# Code first added: 2012-10-25

from dolfin import *
from timestepping import *

from fractions import Fraction
import numpy

parameters["reorder_dofs_serial"] = False

ngrid = 30
nu = StaticConstant(0.0001)
dt = StaticConstant(0.05 / ngrid)
t_end = 0.2

mesh = UnitIntervalMesh(ngrid)
space = FunctionSpace(mesh, "CG", 2)
test, trial = TestFunction(space), TrialFunction(space)

ic = StaticFunction(space, name = "initial_condition")
ic.assign(project(Expression("sin(2.0 * pi * x[0])", element = space.ufl_element()), space))

system = TimeSystem()
levels   = TimeLevels(levels = [n, n + Fraction(1, 2), n + 1], cycle_map = {n:n + 1})
levels_F = TimeLevels(levels = [n, n + Fraction(1, 2)], cycle_map = {}, last_past_level = n - Fraction(1, 2))
u = TimeFunction(levels,   space, name = "u")
F = TimeFunction(levels_F, space, name = "F")
def rhs(n):
  return - dt * (inner(test, dot(as_vector([u[n]]), grad(u[n]))) + nu * inner(grad(test), grad(u[n]))) * dx
def add_F_solve(n):
  system.add_solve(inner(test, trial) * dx == rhs(n),
    F[n],
    StaticDirichletBC(space, 0.0, "on_boundary"), solver_parameters = {"linear_solver":"lu"})
  return
  
system.add_solve(inner(test, trial) * dx == inner(test, ic) * dx, u[0], StaticDirichletBC(space, 0.0, "on_boundary"))
add_F_solve(n)
system.add_solve(LinearCombination((0.5, F[n]), (1.0, u[n])), u[n + Fraction(1, 2)])
add_F_solve(n + Fraction(1, 2))
system.add_solve(LinearCombination((1.0, F[n + Fraction(1, 2)]), (1.0, u[n])), u[n + 1])

system = system.assemble(adjoint = True, disk_period = 10)
t = 0.0
while t <= t_end:
  system.timestep()
  t += float(dt)
system.finalise()

dolfin_adjoint_solution = numpy.array(list(map(float, """0.00000000e+00   9.18884049e-02   1.83778528e-01   2.73898378e-01
   3.61192276e-01   4.42656244e-01   5.13954340e-01   5.69254723e-01
   6.02779759e-01   6.10705544e-01   5.92493125e-01   5.50321112e-01
   4.86499429e-01   3.98932805e-01   2.70968849e-01   1.48795364e-14
  -2.70968849e-01  -3.98932805e-01  -4.86499429e-01  -5.50321112e-01
  -5.92493125e-01  -6.10705544e-01  -6.02779759e-01  -5.69254723e-01
  -5.13954340e-01  -4.42656244e-01  -3.61192276e-01  -2.73898378e-01
  -1.83778528e-01  -9.18884049e-02   0.00000000e+00   4.67098613e-02
   1.39477345e-01   2.31996318e-01   3.24148220e-01   4.16265357e-01
   5.09447246e-01   6.05403325e-01   7.06093497e-01   8.12586277e-01
   9.23957800e-01   1.03674459e+00   1.14517822e+00   1.24143540e+00
   1.31429454e+00   1.34141552e+00  -1.34141552e+00  -1.31429454e+00
  -1.24143540e+00  -1.14517822e+00  -1.03674459e+00  -9.23957800e-01
  -8.12586277e-01  -7.06093497e-01  -6.05403325e-01  -5.09447246e-01
  -4.16265357e-01  -3.24148220e-01  -2.31996318e-01  -1.39477345e-01
  -4.67098613e-02""".split())), dtype = numpy.float64)
err = abs(u[N].vector().array() - dolfin_adjoint_solution).max()
print(u[N].vector().array(), err)
assert(err < 5.0e-9)

system.verify_checkpoints()

system.set_functional(u[N] * u[N] * dx)
J = system.compute_functional()
grad = system.compute_gradient([ic, nu])
dolfin_adjoint_grad = numpy.array(list(map(float, """2.45185565e-06   4.62834966e-03   9.05407801e-03   1.30834054e-02
   1.65394671e-02   1.92698435e-02   2.11509924e-02   2.21029548e-02
   2.20765656e-02   2.09999951e-02   1.72788486e-02   1.26862525e-02
   8.83351473e-03   5.60790460e-03   2.73504776e-03  -1.45283091e-16
  -2.73504776e-03  -5.60790460e-03  -8.83351473e-03  -1.26862525e-02
  -1.72788486e-02  -2.09999951e-02  -2.20765656e-02  -2.21029548e-02
  -2.11509924e-02  -1.92698435e-02  -1.65394671e-02  -1.30834054e-02
  -9.05407801e-03  -4.62834966e-03  -2.45185565e-06   4.63829372e-03
   1.37116134e-02   2.21846959e-02   2.96860750e-02   3.58854011e-02
   4.05075356e-02   4.33531009e-02   4.42318144e-02   4.32638160e-02
   3.85441388e-02   2.98943560e-02   2.14498255e-02   1.44132342e-02
   8.33303804e-03   2.76736871e-03  -2.76736871e-03  -8.33303804e-03
  -1.44132342e-02  -2.14498255e-02  -2.98943560e-02  -3.85441388e-02
  -4.32638160e-02  -4.42318144e-02  -4.33531009e-02  -4.05075356e-02
  -3.58854011e-02  -2.96860750e-02  -2.21846959e-02  -1.37116134e-02
  -4.63829372e-03""".split())), dtype = numpy.float64)
err = abs(grad[0].array() - dolfin_adjoint_grad).max()
assert(err < 5.0e-11)

orders = system.taylor_test(ic, J = J, grad = grad[0])
assert((orders > 1.99).all())

orders = system.taylor_test(nu, J = J, grad = grad[1])
assert((orders > 1.99).all())
