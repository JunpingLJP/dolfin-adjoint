#!/usr/bin/env python3

# Copyright (C) 2011-2012 by Imperial College London
# Copyright (C) 2013 University of Oxford
# Copyright (C) 2014, 2017 The University of Edinburgh
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, version 3 of the License
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Based on burgers_newton.py test from dolfin-adjoint
# Code first added: 2012-10-25

from dolfin import *
from timestepping import *

import numpy

parameters["reorder_dofs_serial"] = False

ngrid = 30
nu = StaticConstant(0.0001)
dt = StaticConstant(0.05 / ngrid)
t_end = 0.2

mesh = UnitIntervalMesh(ngrid)
space = FunctionSpace(mesh, "CG", 2)
test, trial = TestFunction(space), TrialFunction(space)

ic = StaticFunction(space, name = "initial_condition")
ic.assign(project(Expression("sin(2.0 * pi * x[0])", element = space.ufl_element()), space))

system = TimeSystem()
levels = TimeLevels(levels = [n, n + 1], cycle_map = {n:n + 1})
u = TimeFunction(levels, space, name = "u")
system.add_solve(inner(test, trial) * dx == inner(test, ic) * dx, u[0], StaticDirichletBC(space, 0.0, "on_boundary"))
system.add_solve(inner(test, trial) * dx == (inner(test, u[n]) - dt * (inner(test, dot(as_vector([u[n]]), grad(u[n]))) + nu * inner(grad(test), grad(u[n])))) * dx,
  u[n + 1],
  StaticDirichletBC(space, 0.0, "on_boundary"), solver_parameters = {"linear_solver":"lu"})

system = system.assemble(adjoint = True, disk_period = 10)
t = 0.0
while t <= t_end:
  system.timestep()
  t += float(dt)
system.finalise()

dolfin_adjoint_solution = numpy.array(list(map(float, """0.00000000e+00   9.16017597e-02   1.83344728e-01   2.73655452e-01
   3.62085675e-01   4.46362566e-01   5.22951832e-01   5.85781955e-01
   6.26980225e-01   6.38974170e-01   6.17952594e-01   5.65980265e-01
   4.89129434e-01   3.90933947e-01   2.59629562e-01   5.34010615e-15
  -2.59629562e-01  -3.90933947e-01  -4.89129434e-01  -5.65980265e-01
  -6.17952594e-01  -6.38974170e-01  -6.26980225e-01  -5.85781955e-01
  -5.22951832e-01  -4.46362566e-01  -3.62085675e-01  -2.73655452e-01
  -1.83344728e-01  -9.16017597e-02   0.00000000e+00   4.65225443e-02
   1.38897138e-01   2.30966627e-01   3.22458738e-01   4.13369664e-01
   5.04423987e-01   5.97094181e-01   6.93968079e-01   7.97755328e-01
   9.09635093e-01   1.02719877e+00   1.14375143e+00   1.24911355e+00
   1.32992927e+00   1.36392254e+00  -1.36392254e+00  -1.32992927e+00
  -1.24911355e+00  -1.14375143e+00  -1.02719877e+00  -9.09635093e-01
  -7.97755328e-01  -6.93968079e-01  -5.97094181e-01  -5.04423987e-01
  -4.13369664e-01  -3.22458738e-01  -2.30966627e-01  -1.38897138e-01
  -4.65225443e-02""".split())), dtype = numpy.float64)
err = abs(u[N].vector().array() - dolfin_adjoint_solution).max()
print(u[N].vector().array(), err)
assert(err < 5.0e-9)

system.verify_checkpoints()

system.set_functional(u[N] * u[N] * dx)
J = system.compute_functional()
grad = system.compute_gradient([ic, nu])
dolfin_adjoint_grad = numpy.array(list(map(float, """2.30422831e-06   4.60255794e-03   9.01339939e-03   1.30478347e-02
   1.65350083e-02   1.93224144e-02   2.12881455e-02   2.23949830e-02
   2.22379559e-02   2.20663586e-02   1.87575568e-02   1.34295463e-02
   8.39531731e-03   4.67044889e-03   2.10836200e-03  -4.60785923e-17
  -2.10836200e-03  -4.67044889e-03  -8.39531731e-03  -1.34295463e-02
  -1.87575568e-02  -2.20663586e-02  -2.22379559e-02  -2.23949830e-02
  -2.12881455e-02  -1.93224144e-02  -1.65350083e-02  -1.30478347e-02
  -9.01339939e-03  -4.60255794e-03  -2.30422831e-06   4.61188720e-03
   1.36434016e-02   2.21058391e-02   2.96427575e-02   3.59324223e-02
   4.07041065e-02   4.37127664e-02   4.48751680e-02   4.41279046e-02
   4.14083254e-02   3.21424702e-02   2.17426611e-02   1.29335525e-02
   6.71895257e-03   2.15811908e-03  -2.15811908e-03  -6.71895257e-03
  -1.29335525e-02  -2.17426611e-02  -3.21424702e-02  -4.14083254e-02
  -4.41279046e-02  -4.48751680e-02  -4.37127664e-02  -4.07041065e-02
  -3.59324223e-02  -2.96427575e-02  -2.21058391e-02  -1.36434016e-02
  -4.61188720e-03""".split())), dtype = numpy.float64)
err = abs(grad[0].array() - dolfin_adjoint_grad).max()
print(grad[0].array(), err)
assert(err < 5.0e-11)

orders = system.taylor_test(ic, J = J, grad = grad[0])
assert((orders > 2.0).all())

orders = system.taylor_test(nu, J = J, grad = grad[1])
assert((orders > 1.99).all())
